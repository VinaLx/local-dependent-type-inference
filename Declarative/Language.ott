metavar exprvar, x, y, z ::= {{ com variables }} {{ repr-locally-nameless }}
metavar number, n ::= {{ com numbers }} {{ coq nat }}

grammar

expr, e, A, B, C :: 'e_' ::= {{ com expressions }}
  | x       :: :: var  {{ com variable }}
  | *       :: :: star {{ com type of type }}
  | e1 e2   :: :: app  {{ com application }}
  | n       :: :: num  {{ com integer value }}
  | e1 + e2 :: :: plus {{ com plus }}
  | int     :: :: int  {{ com integer type }}
  | lambda x : A . e :: :: abs  (+ bind x in e +) {{ com abstraction }}
  | pi     x : A . B :: :: pi   (+ bind x in B +) {{ com dependent product }}
  | forall x : A . B :: :: all  (+ bind x in B +) {{ com forall type  }}
  | bind   x     . e :: :: bind (+ bind x in e +) {{ com name binding }}
  | ( e )         :: S :: paren {{ coq ([[e]]) }}
  | [ e1 / x ] e2 :: M :: subst {{ coq (open_expr_wrt_expr [[x e2]] [[e1]]) }}

context, Gamma, G :: 'ctx_' ::= {{ com contexts }} {{ coq (list (exprvar * expr)) }}
  | nil       :: :: nil  {{ com empty context }}   {{ coq nil }}
  | G , x : A :: :: cons {{ com context binding }} {{ coq (([[x]], [[A]]) :: [[G]]) }}

formula :: formula_ ::=
  | judgement  ::   :: judgement
  | x : A in G :: M :: binding   {{ coq (binds [[x]] [[A]] [[G]]) }}
  | G |- e : A :: M :: typing    {{ coq (usub [[G]] [[e]] [[e]] [[A]]) }}
  | x # G      :: M :: ctx_fresh {{ coq ([[x]] `notin` dom [[G]]) }}
  | x # e      :: M :: exp_fresh
    {{ coq (forall x , x `notin` L -> x `notin` fv_expr [[e]] ) }}
  | close e    :: M :: exp_close {{ coq (fv_expr [[e]] = empty)}}

substitutions
  single e x :: subst

freevars
  expr x :: fv

defns
MonoType :: '' ::=

defn
monotype A :: :: mono_type :: 'mono_' by

----------- :: star
monotype *

----------- :: var
monotype x

----------- :: int
monotype int

----------- :: lit
monotype n

monotype A
monotype B
-------------------- :: pi
monotype pi x : A . B

defns
UnifiedSubtyping :: '' ::=

defn
|- G :: :: wf_context :: 'wf_' by

------ :: nil
|- nil

|- G
x # G
G |- A : *
------------ :: cons
|- G , x : A

defn
G |- e1 <: e2 : A :: :: usub :: 's_' by

|- G
x : A in G
------------------- :: var
G |- x <: x : A

|- G
------------------- :: lit
G |- n <: n : int

|- G
------------------- :: star
G |- * <: * : *

|- G
------------------- :: int
G |- int <: int : *

G |- A : *
G , x : A |- e1 <: e2 : B
------------------------------------------------------- :: abs
G |- lambda x : A. e1 <: lambda x : A. e2 : pi x : A. B

G |- A1 : *
G |- A2 : *
G |- A2 <: A1 : *
G , x : A1 |- B1 <: B1 : *
G , x : A2 |- B1 <: B2 : *
--------------------------------------- :: pi
G |- pi x : A1. B1 <: pi x : A2. B2 : *

G |- e : A
G |- e1 <: e2 : pi x : A. B
------------------------------- :: app
G |- e1 e <: e2 e : [e/x]B

close A
G |- A : *
G , x : A |- e1 <: e2 : B
----------------------------------------------- :: forall
G |- bind x. e1 <: bind x. e2 : forall x : A. B

monotype e
close A
G |- A : *
G |- e : A
G |- [e/x] B <: C : *
G , x : A |- B : *
------------------------------- :: forall_l
G |- forall x : A. B <: C : *

close B
G |- B : *
G , x : B |- A <: C : *
x # A
------------------------------- :: forall_r
G |- A <: forall x : B. C : *

G |- e1 <: e2 : A
G |- A  <: B  : *
------------------ :: sub
G |- e1 <: e2 : B